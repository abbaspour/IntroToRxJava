<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.oasis-open.org/docbook/xml/5.0b3/xsd/docbook.xsd">

    <title>Introduction</title>

    <para>
        RxJava is a Java VM implementation of Reactive Extensions: a library for composing asynchronous
        and event-based programs by using observable sequences.
    </para>

    <para>
        It extends the observer pattern to support sequences of data/events and adds operators
        that allow you to compose sequences together declaratively while abstracting away
        concerns about things like low-level threading, synchronization, thread-safety,
        concurrent data structures, and non-blocking I/O.
    </para>

    <para>
        It supports Java 6 or higher and JVM-based languages such as Groovy, Clojure, JRuby, Kotlin and Scala.
    </para>

    <table frame='all'>
        <title>Compare Sync/Async</title>
        <tgroup cols='3' colsep='0' rowsep='0'>
            <colspec colname='c1' colwidth="1*"/>
            <colspec colname='c2' colwidth="1*"/>
            <colspec colname='c3' colwidth="1*"/>
            <thead>
                <row>
                    <entry namest="c1" nameend="c3" align="center">
                        Observables fill the gap by being the ideal way to access asynchronous
                        sequences of multiple items
                    </entry>
                </row>
                <row>
                    <entry></entry>
                    <entry>single items</entry>
                    <entry>multiple items</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry>synchronous</entry>
                    <entry>
                        <tag>T getData()</tag>
                    </entry>
                    <entry>
                        <tag>Iterable&lt;T&gt; getData()</tag>
                    </entry>
                </row>
                <row>
                    <entry>asynchronous</entry>
                    <entry>
                        <tag>Future&lt;T&gt; getData()</tag>
                    </entry>
                    <entry>
                        <tag>Observable&lt;T&gt; getData()</tag>
                    </entry>
                </row>
            </tbody>
        </tgroup>
    </table>


    <sect1>
        <title>Why RxJava?</title>

        <sect2>
            <title>Observables are Composable</title>

            <para>
                Java Futures are straightforward to use for a single level of asynchronous execution but
                they start to add non-trivial complexity when they’re nested.
            </para>
            <para>
                It is difficult to use Futures to optimally compose conditional asynchronous
                execution flows (or impossible, since latencies of each request vary at runtime).
                This can be done, of course, but it quickly becomes complicated (and thus error-prone)
                or it prematurely blocks on Future.get(), which eliminates the benefit of asynchronous execution.
            </para>
            <para>
                RxJava Observables on the other hand are intended for composing flows and sequences
                of asynchronous data.
            </para>
        </sect2>

        <sect2>
            <title>Observables are Flexible</title>

            <para>
                RxJava’s Observables support not just the emission of single scalar values (as Futures do),
                but also of sequences of values or even infinite streams. Observable is a single abstraction
                that can be used for any of these use cases. An Observable has all of the flexibility and
                elegance associated with its mirror-image cousin the Iterable.
            </para>

            <table frame='all'>
                <title>Compare Pull/Push</title>
                <tgroup cols='3' colsep='0' rowsep='0'>
                    <colspec colname='c1' colwidth="1*"/>
                    <colspec colname='c2' colwidth="1*"/>
                    <colspec colname='c3' colwidth="1*"/>
                    <thead>
                        <row>
                            <entry namest="c1" nameend="c3" align="center">
                                An Observable is the asynchronous/push "dual" to the synchronous/pull Iterable
                            </entry>
                        </row>
                        <row>
                            <entry>event</entry>
                            <entry>Iterable (pull)</entry>
                            <entry>Observable (push)</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>retrieve data</entry>
                            <entry>
                                <tag>T next()</tag>
                            </entry>
                            <entry>
                                <tag>onNext(T)</tag>
                            </entry>
                        </row>
                        <row>
                            <entry>discover error</entry>
                            <entry>
                                <tag>throws Exception</tag>
                            </entry>
                            <entry>
                                <tag>onError(Exception)</tag>
                            </entry>
                        </row>
                        <row>
                            <entry>complete</entry>
                            <entry>
                                <tag>!hasNext()</tag>
                            </entry>
                            <entry>
                                <tag>onCompleted()</tag>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>

        </sect2>


        <sect2>
            <title>Observables are Less Opinionated</title>

            <para>
                The RxJava implementation is not biased toward some particular source of concurrency
                or asynchronicity. Observables in RxJava can be implemented using thread-pools,
                event loops, non-blocking I/O, actors (such as from Akka), or whatever implementation
                suits your needs, your style, or your expertise. Client code treats all of its
                interactions with Observables as asynchronous, whether your underlying implementation
                is blocking or non-blocking and however you choose to implement it.
            </para>

            <para>
                RxJava also tries to be very lightweight. It is implemented as a single JAR that is
                focused on just the Observable abstraction and related higher-order functions.
                You could implement a composable Future that is similarly unbiased, but Akka Futures
                for example come tied in with an Actor library and a lot of other stuff.)
            </para>

            <table frame='all'>
                <title>Obseravle Implementation</title>
                <tgroup cols='1' colsep='0' rowsep='0'>
                    <colspec colname='c1' colwidth="1*"/>
                    <thead>
                        <row>
                            <entry align="center">
                                How is this Observable implemented?
                            </entry>
                        </row>
                    </thead>
                    <tfoot>
                        <row>
                            <entry align="center">
                                From the Observer's point of view, it doesn't matter!
                            </entry>
                        </row>
                    </tfoot>
                    <tbody>
                        <row>
                            <entry>
                                <itemizedlist>
                                    <listitem>does it work synchronously on the same thread as the caller?
                                    </listitem>
                                    <listitem>does it work asynchronously on a distinct thread?</listitem>
                                    <listitem>does it divide its work over multiple threads that may return data
                                        to the caller in any order?
                                    </listitem>
                                    <listitem>does it use an Actor (or multiple Actors) instead of a thread pool?
                                    </listitem>
                                    <listitem>does it use NIO with an event-loop to do asynchronous network access?
                                    </listitem>
                                    <listitem>does it use an event-loop to separate the work thread from the callback
                                        thread?
                                    </listitem>
                                </itemizedlist>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>

            <para>
                And importantly: with RxJava you can later change your mind, and radically change the underlying nature
                of your Observable implementation, without breaking the consumers of your Observable.
            </para>
        </sect2>


        <sect2>
            <title>Callbacks Have Their Own Problems</title>

            <para>
                Callbacks solve the problem of premature blocking on Future.get() by not allowing anything to block.
                They are naturally efficient because they execute when the response is ready.
            </para>
            <para>
                But as with Futures, while callbacks are easy to use with a single level of asynchronous execution, with
                nested composition they become unwieldy.
            </para>
        </sect2>

        <sect2>
            <title>RxJava is a Polyglot Implementation</title>

            <para>
                RxJava is meant for a more polyglot environment than just Java/Scala, and it is being designed to
                respect the idioms of each JVM-based language. (This is something we’re still working on.)
            </para>

        </sect2>
    </sect1>

    <sect1>
        <title>Reactive Programming</title>

        <para>
            RxJava provides a collection of operators with which you can filter, select, transform, combine, and compose
            Observables. This allows for efficient execution and composition.
        </para>
        <para>
            You can think of the Observable class as a “push” equivalent to Iterable, which is a “pull.” With an
            Iterable, the consumer pulls values from the producer and the thread blocks until those values arrive. By
            contrast, with an Observable the producer pushes values to the consumer whenever values are available. This
            approach is more flexible, because values can arrive synchronously or asynchronously.
        </para>

        <table frame='all'>
            <title>Example Code Higher Order Function</title>
            <tgroup cols='2' colsep='0' rowsep='0'>
                <colspec colname='c1' colwidth="1*"/>
                <colspec colname='c2' colwidth="1*"/>
                <thead>
                    <row>
                        <entry namest="c1" nameend="c2" align="center">
                            Example code showing how similar high-order functions can be applied to an Iterable and an
                            Observable
                        </entry>
                    </row>
                    <row>
                        <entry>Iterable</entry>
                        <entry>Observable</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>
                            <programlisting linenumbering="unnumbered">
                                <![CDATA[
getDataFromLocalMemory()
    .skip(10)
    .take(5)
    .map({ s -> return s + " transformed" })
    .forEach({ println "next => " + it })
                                ]]>
                            </programlisting>
                        </entry>
                        <entry>
                            <programlisting linenumbering="unnumbered">
                                <![CDATA[
getDataFromNetwork()
    .skip(10)
    .take(5)
    .map({ s -> return s + " transformed" })
    .subscribe({ println "onNext => " + it })
                                  ]]>
                            </programlisting>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>

        <para>
            The Observable type adds two missing semantics to the Gang of Four’s Observer pattern, to match those that
            are available in the Iterable type:
        </para>

        <orderedlist>
            <listitem>
                the ability for the producer to signal to the consumer that there is no more data available (a foreach
                loop on
                an Iterable completes and returns normally in such a case; an Observable calls its observer's
                <tag>onCompleted()</tag>
                method)
            </listitem>
            <listitem>
                the ability for the producer to signal to the consumer that an error has occurred (an Iterable throws an
                exception if an error takes place during iteration; an Observable calls its observer's
                <tag>onError()</tag>
                method)
            </listitem>
        </orderedlist>

        <para>
            With these additions, RxJava harmonizes the Iterable and Observable types. The only difference between them
            is the direction in which the data flows. This is very important because now any operation you can perform
            on an Iterable, you can also perform on an Observable.
        </para>
        <para>
            We sometimes call this approach Functional Reactive Programming because it applies functions
            (lambdas/closures) in a reactive (asynchronous/push) manner to asynchronous sequences of data. (This is not
            meant to be an implementation of the similar but more restrictive “functional reactive programming” model
            used in languages like Fran.)
        </para>
    </sect1>

</chapter>